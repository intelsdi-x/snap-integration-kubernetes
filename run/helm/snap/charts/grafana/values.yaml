server:
  ## Grafana Pod annotations:
  ##
  # annotations:
  #   iam.amazonaws.com/role: grafana

  ## Grafana service port
  ##
  httpPort: 80

  ## Grafana Docker image
  ##
  image: "grafana/grafana:latest"

  ingress:
    ## If true, Grafana Ingress will be created
    ##
    enabled: false

    ## Grafana Ingress annotations
    ##
    # annotations:
    #   kubernetes.io/ingress.class: nginx
    #   kubernetes.io/tls-acme: 'true'

    ## Grafana Ingress hostnames
    ## Must be provided if Ingress is enabled
    ##
    # hosts:
    #   - grafana.domain.com

    ## Grafana Ingress TLS configuration
    ## Secrets must be manually created in the namespace
    ##
    # tls:
    #   - secretName: grafana-server-tls
    #     hosts:
    #       - grafana.domain.com

  ## Grafana container name
  ##
  name: grafana

  adminUser: "admin"
  # adminPassword: "admin"

  ## Global imagePullPolicy
  ## Default: 'Always' if image tag is 'latest', else 'IfNotPresent'
  ## Ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  # imagePullPolicy:

  # Persist data to a persitent volume
  persistentVolume:
    ## If true, Grafana will create a Persistent Volume Claim
    ## If false, use emptyDir
    ##
    enabled: true

    ## Grafana data Persistent Volume access modes
    ## Must match those of existing PV or dynamic provisioner
    ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    accessModes:
      - ReadWriteOnce

    ## Server data Persistent Volume annotations
    ##
    # annotations:

    ## Grafana data Persistent Volume size
    ## Default: 1Gi
    ##
    size: 1Gi

    ## Data Persistent Volume Storage Class
    ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
    ## Default: volume.alpha.kubernetes.io/storage-class: default
    ##
    # storageClass:

  ## Grafana resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
   #  limits:
   #   cpu: 500m
   #   memory: 512Mi
    requests:
      cpu: 100m
      memory: 100Mi

  ## Grafana service type
  ##
  serviceType: ClusterIP

  ## Load balancer IP address
  ## Is not required, but allows for static address with
  ## serviceType LoadBalancer.
  ## If not supported by cloud provider, this field is ignored.
  ## Default: nil
  ##
  # loadBalancerIP:

  ## This will restrict traffic through the cloud-provider load-balancer
  ## to the specified client IPs.
  ## If not supported by cloud provider, this field is ignored.
  ## Default: nil
  ##
  # loadBalancerSourceRanges:


  ## Grafana local config path
  ## Default '/etc/grafana'
  ##
  # configLocalPath: /etc/grafana

  ## Grafana local dashboards path
  ## Default: '/var/lib/grafana/dashboards'
  ##
  # dashboardLocalPath: /var/lib/grafana/dashboards

  ## Grafana local data storage path
  ## Default: '/var/lib/grafana/data'
  ##
  # storageLocalPath: /var/lib/grafana/data

  ## Grafana Pod termination grace period
  ## Default: 300s (5m)
  ##
  # terminationGracePeriodSeconds: 300

  # Set datasource in beginning
  setDatasource:
    ## If true, an initial Grafana Datasource will be set
    ## Default: false
    ##
    enabled: false

    ## How long should it take to commit failure
    ## Default: 300
    ##
    # activeDeadlineSeconds: 300

    ## Curl Docker image
    ## Default: appropriate/curl:latest
    ##
    initImage: cosmintitei/bash-curl
    image: appropriate/curl:latest

    ## This assembles how curl post into Grafana
    ## Ref1: http://docs.grafana.org/reference/http_api/#create-data-source
    ## Ref2: https://github.com/grafana/grafana/issues/1789
    ##
    # datasource:
      ## The datasource name.
      ## Default: default
      # name: default

      ## Type of datasource
      ## Default: prometheus
      ##
      # type: prometheus

      ## The url of the datasource. To set correctly you need to know
      ## the right datasource name and its port ahead. Check kubernetes
      ## dashboard or describe the service should fulfill the requirements.
      ## Synatx like `http://<release name>-<server name>:<port number>
      ## Default: "http://limping-tiger-server"
      ##
      # url: "http://limping-tiger-server"

      ## Specify if Grafana has to go thru proxy to reach datasource
      ## Default: proxy
      ##
      # access: proxy

      ## Specify should Grafana use this datasource as default
      ## Default: true
      ##
      # isDefault: true

    ## Specify the job policy
    ## Default: OnFailure
    ##
    # restartPolicy: OnFailure

